name: Test "Setup Git"

on:
  workflow_call:
    inputs:
      asserted-cache-hit-status:
        description: "Determines which cache hit status will be asserted. ('true' for cache hit, 'false' for cache miss, or empty for no assertion)."
        type: string
      cache-key-prefix:
        description: "Prefix for cache key"
        type: string

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04, macos-15, macos-14, macos-13]
        git-version: ["2.23.0", "2.43.6"]
        include:
          - runs-on: windows-2025
            git-version: 2.23.0.windows.1
          - runs-on: windows-2025
            git-version: 2.44.0.windows.1
          - runs-on: windows-2022
            git-version: 2.23.0.windows.1
          - runs-on: windows-2022
            git-version: 2.44.0.windows.1
          - runs-on: windows-2019
            git-version: 2.23.0.windows.1
          - runs-on: windows-2019
            git-version: 2.44.0.windows.1
    name: "Run tests on ${{ matrix.runs-on }} with Git v${{ matrix.git-version }}"
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Setup Git
        id: setup-git
        uses: ./
        with:
          version: ${{ matrix.git-version }}
          verbose: true
          installation-id: ${{ inputs.cache-key-prefix && format('{0}-', inputs.cache-key-prefix) }}${{ matrix.runs-on }}
      - name: Assert correct Git version is available in bash
        shell: bash
        run: |
          command -v git >/dev/null \
            || (echo "Assertion failed: Expected Git to be installed, but it wasn't" >&2; exit 1)
          [ "$(git --version)" == "git version $GIT_VERSION" ] \
            || (echo "Assertion failed: Expected version = 'git version $GIT_VERSION', but got '$(git --version)'." >&2; exit 1)
        env:
          GIT_VERSION: ${{ matrix.git-version }}
      - name: Assert correct Git version is available in shell
        shell: sh
        run: |
          command -v git > /dev/null 2>&1 || {
            echo "Assertion failed: Expected Git to be installed, but it wasn't" >&2
            exit 1
          }
          if [ "$(git --version)" != "git version $GIT_VERSION" ]; then
            echo "Assertion failed: Expected version = 'git version $GIT_VERSION', but got '$(git --version)'." >&2
            exit 1
          fi
        env:
          GIT_VERSION: ${{ matrix.git-version }}
      - name: Assert correct Git version is available in PowerShell (pwsh)
        shell: pwsh
        run: |
          if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
              Write-Error "Assertion failed: Expected Git to be installed, but it wasn't"
              exit 1
          }
          if ((git --version) -ne "git version $env:GIT_VERSION") {
              Write-Error "Assertion failed: Expected version = 'git version $env:GIT_VERSION', but got '$(git --version)'."
              exit 1
          }
        env:
          GIT_VERSION: ${{ matrix.git-version }}
      - name: Assert correct Git version is available in Windows PowerShell
        shell: powershell
        if: runner.os == 'Windows'
        run: |
          if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
              Write-Error "Assertion failed: Expected Git to be installed, but it wasn't"
              exit 1
          }
          if ((git --version) -ne "git version $env:GIT_VERSION") {
              Write-Error "Assertion failed: Expected version = 'git version $env:GIT_VERSION', but got '$(git --version)'."
              exit 1
          }
        env:
          GIT_VERSION: ${{ matrix.git-version }}
      - name: Assert correct Git version is available cmd
        shell: cmd
        if: runner.os == 'Windows'
        run: |
          where git >nul 2>nul
          if errorlevel 1 (
              echo Assertion failed: Expected Git to be installed, but it wasn't
              exit /b 1
          )
          for /f "delims=" %%i in ('git --version') do (
              if not "%%i"=="git version %GIT_VERSION%" (
                  echo Assertion failed: Expected version = 'git version %GIT_VERSION%', but got '%%i'.
                  exit /b 1
              )
          )
        env:
          GIT_VERSION: ${{ matrix.git-version }}
      - name: Assert cache hit status
        shell: bash
        if: inputs.asserted-cache-hit-status != ''
        run: |
          [ "$CACHE_HIT" == "$ASSERTED_CACHE_HIT" ] \
            || (echo "Assertion failed: Expected cache-hit = '$ASSERTED_CACHE_HIT', but got '$CACHE_HIT'." >&2; exit 1)
          [ "$INSTALLATION_SKIPPED" == "$ASSERTED_CACHE_HIT" ] \
            || (echo "Assertion failed: Expected installation-skipped = '$ASSERTED_CACHE_HIT', but got '$INSTALLATION_SKIPPED'." >&2; exit 1)
        env:
          ASSERTED_CACHE_HIT: ${{ inputs.asserted-cache-hit-status }}
          CACHE_HIT: ${{ steps.setup-git.outputs.cache-hit }}
          INSTALLATION_SKIPPED: ${{ steps.setup-git.outputs.installation-skipped }}
